#![cfg_attr(not(test), no_std)]
#![cfg_attr(not(test), no_main)]

#[cfg(test)]
extern crate alloc;

#[cfg(not(test))]
ckb_std::entry!(program_entry);
// By default, the following heap configuration is used:
// * 16KB fixed heap
// * 1.2MB(rounded up to be 16-byte aligned) dynamic heap
// * Minimal memory block in dynamic heap is 64 bytes
// For more details, please refer to ckb-std's default_alloc macro
// and the buddy-alloc alloc implementation.
ckb_std::default_alloc!(16384, 1258306, 64);

use k256::ecdsa::{RecoveryId, Signature, VerifyingKey};

pub fn program_entry() -> i8 {
    let msg_bytes = [
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
    ];
    let pub_bytes = [
        0x03, 0x0c, 0xec, 0x02, 0x8e, 0xe0, 0x8d, 0x09, 0xe0, 0x26, 0x72, 0xa6, 0x83, 0x10, 0x81,
        0x43, 0x54, 0xf9, 0xea, 0xbf, 0xff, 0x0d, 0xe6, 0xda, 0xcc, 0x1c, 0xd3, 0xa7, 0x74, 0x49,
        0x60, 0x76, 0xae,
    ];
    let sig_bytes = [
        0x03, 0x70, 0xaa, 0x07, 0xdb, 0x8b, 0xe4, 0x4c, 0xae, 0xd0, 0xf4, 0xc7, 0x7a, 0xa6, 0xa6,
        0x44, 0xfa, 0x97, 0x22, 0x8f, 0xee, 0xb7, 0x08, 0x2a, 0xe6, 0x6f, 0x64, 0x0f, 0xe0, 0xd7,
        0xd7, 0x28, 0x61, 0x0c, 0x2a, 0x4e, 0x16, 0x55, 0x18, 0x3d, 0x13, 0x4e, 0x19, 0x1c, 0x8a,
        0x4a, 0x06, 0xd9, 0x70, 0xbc, 0x7a, 0x94, 0xa2, 0x54, 0x20, 0xf5, 0x02, 0x6a, 0x02, 0x88,
        0xff, 0x47, 0xad, 0x42,
    ];
    let rec_id = RecoveryId::try_from(1u8).unwrap();
    let sig = Signature::from_slice(&sig_bytes).unwrap();
    let pubkey_expect = VerifyingKey::from_sec1_bytes(&pub_bytes).unwrap();
    let recovered_key = VerifyingKey::recover_from_msg(&msg_bytes, &sig, rec_id).unwrap();
    assert_eq!(recovered_key, pubkey_expect);
    0
}
