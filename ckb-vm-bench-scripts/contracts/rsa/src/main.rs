#![cfg_attr(not(test), no_std)]
#![cfg_attr(not(test), no_main)]

#[cfg(test)]
extern crate alloc;

#[cfg(not(test))]
ckb_std::entry!(program_entry);
// By default, the following heap configuration is used:
// * 16KB fixed heap
// * 1.2MB(rounded up to be 16-byte aligned) dynamic heap
// * Minimal memory block in dynamic heap is 64 bytes
// For more details, please refer to ckb-std's default_alloc macro
// and the buddy-alloc alloc implementation.
ckb_std::default_alloc!(16384, 1258306, 64);

use num_traits::FromPrimitive;
use rsa::pkcs1v15::VerifyingKey;
use rsa::sha2::Sha256;
use rsa::{pkcs1v15, signature::Verifier, BigUint, RsaPublicKey};

pub fn program_entry() -> i8 {
    let msg_bytes = [
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
    ];
    let sig_bytes: [u8; 256] = [
        0x23, 0x9b, 0xae, 0xdd, 0x3a, 0x4e, 0x3e, 0xb6, 0xb2, 0x8d, 0x70, 0xdf, 0xd7, 0x65, 0xf2,
        0xd1, 0x23, 0x47, 0x92, 0xf5, 0xfa, 0x18, 0x38, 0x92, 0xe1, 0xbc, 0x4f, 0xd7, 0xa0, 0x0a,
        0x96, 0x39, 0x29, 0xb0, 0x3e, 0x1b, 0xac, 0x28, 0xe9, 0x21, 0xbe, 0x44, 0x42, 0x0c, 0x53,
        0x13, 0x1e, 0xd7, 0x63, 0x32, 0x76, 0x20, 0xf6, 0xfa, 0xbf, 0x96, 0x2a, 0xbe, 0xdb, 0x39,
        0xb6, 0x9d, 0x29, 0x16, 0x30, 0x12, 0x69, 0x1a, 0x70, 0x9d, 0x23, 0xb5, 0x2a, 0xe3, 0xfb,
        0xe4, 0x51, 0xa2, 0x5e, 0xf8, 0xac, 0xf3, 0x1f, 0x46, 0x5b, 0xfd, 0xc5, 0x6f, 0xb3, 0x35,
        0x35, 0xd3, 0x2d, 0xf6, 0x24, 0x7d, 0x55, 0x66, 0x01, 0x2f, 0x59, 0xac, 0x4e, 0xa7, 0xd4,
        0xca, 0xbd, 0x12, 0x0e, 0x96, 0xbd, 0x67, 0x5d, 0x41, 0x0e, 0x3e, 0xe4, 0x72, 0x56, 0x32,
        0x97, 0x50, 0x15, 0x62, 0xb7, 0xc1, 0x23, 0xba, 0xaa, 0x47, 0x6d, 0x0d, 0x1a, 0x7a, 0x56,
        0x2d, 0xca, 0x45, 0xc3, 0x05, 0x7a, 0xb6, 0x5a, 0x1e, 0xe3, 0xa7, 0xba, 0x52, 0x7e, 0x3e,
        0x6e, 0xbb, 0x3e, 0xaf, 0x6c, 0x99, 0x95, 0xa1, 0xfc, 0x71, 0x6f, 0x61, 0x28, 0x97, 0x29,
        0x09, 0xa2, 0x0e, 0xaa, 0xea, 0xd2, 0x2c, 0x03, 0x02, 0xa4, 0x55, 0xf8, 0x7e, 0x6b, 0x08,
        0xe5, 0x74, 0x27, 0xee, 0x73, 0xc1, 0x53, 0x42, 0x92, 0x05, 0x9e, 0x74, 0x66, 0xf6, 0xbc,
        0x17, 0x89, 0x0c, 0x09, 0x82, 0x09, 0x92, 0x5c, 0xdd, 0x53, 0x26, 0x61, 0xb5, 0x07, 0xf3,
        0xb5, 0x5d, 0xb0, 0xb9, 0x36, 0x2f, 0x36, 0xc6, 0x7f, 0xea, 0xd9, 0x19, 0xc7, 0x20, 0x31,
        0x43, 0x4c, 0xd9, 0xc8, 0x23, 0x9e, 0xad, 0x72, 0x11, 0xd0, 0x31, 0x18, 0x83, 0x82, 0x0b,
        0x60, 0x50, 0xb2, 0x08, 0x2f, 0x03, 0x49, 0x07, 0xcc, 0xcd, 0x26, 0x36, 0x09, 0x48, 0x17,
        0xe8,
    ];
    let pubkey = RsaPublicKey::new(
        BigUint::from_bytes_be(&[
            0x71, 0x63, 0xc8, 0x42, 0xb2, 0x19, 0x0a, 0x89, 0x70, 0x94, 0x2b, 0x27, 0x64, 0xae,
            0xd4, 0x2d, 0x41, 0x24, 0x64, 0x7b, 0x6f, 0x30, 0xe0, 0x9a, 0x2d, 0xa1, 0xc0, 0xe2,
            0x56, 0xaa, 0x2e, 0xe2, 0x4e, 0x79, 0x0c, 0x40, 0xc9, 0x6a, 0x4b, 0xd6, 0x6d, 0x75,
            0xc3, 0x71, 0xa9, 0x15, 0xe0, 0x70, 0x3c, 0x47, 0x6b, 0x4e, 0x1a, 0x06, 0xf1, 0xbd,
            0x38, 0xc5, 0xa3, 0xc1, 0x0a, 0xe3, 0xbd, 0x30, 0xf4, 0xef, 0x62, 0xa5, 0xaa, 0x4f,
            0x51, 0x2a, 0xd1, 0x45, 0xa0, 0x6c, 0x48, 0xe9, 0x64, 0x69, 0xa2, 0x2c, 0xe8, 0xe6,
            0x21, 0xe0, 0x52, 0xf0, 0x66, 0x9a, 0x8c, 0x34, 0x15, 0x55, 0x12, 0xd8, 0x2e, 0x55,
            0x44, 0x7f, 0x0b, 0x7e, 0x18, 0xda, 0x94, 0xbd, 0x91, 0x1a, 0xc7, 0xb3, 0xaa, 0xbe,
            0x70, 0x68, 0x43, 0x66, 0x89, 0x64, 0x59, 0x3e, 0xe7, 0x1b, 0x2e, 0x5e, 0x48, 0x4b,
            0xcf, 0x0c, 0x78, 0x34, 0x10, 0x1a, 0xb5, 0xd6, 0x1b, 0xba, 0x1e, 0x63, 0xe6, 0x23,
            0x7a, 0xf4, 0x04, 0x89, 0xce, 0x36, 0xa2, 0x60, 0xda, 0xb7, 0x0a, 0xdd, 0x4f, 0xbe,
            0xc2, 0x4d, 0x65, 0x9d, 0xb0, 0xf7, 0xca, 0xc0, 0x99, 0xb0, 0xa3, 0xaa, 0x45, 0x49,
            0xac, 0xde, 0x7f, 0xc8, 0x58, 0xa7, 0x93, 0xa9, 0x75, 0xe6, 0xcf, 0x65, 0xca, 0x27,
            0x6b, 0x74, 0x35, 0x25, 0xf0, 0x88, 0x39, 0x80, 0xf6, 0xad, 0x06, 0x9b, 0xec, 0x34,
            0x6d, 0x78, 0x77, 0x97, 0x38, 0x6d, 0x50, 0xfe, 0x0c, 0x97, 0x34, 0xbe, 0x96, 0x7c,
            0x7d, 0x84, 0xae, 0x5b, 0x8f, 0x34, 0x9b, 0x09, 0x40, 0x79, 0x45, 0x7c, 0x0c, 0x0c,
            0x6f, 0xee, 0x34, 0xc4, 0x2a, 0x0b, 0x83, 0x26, 0x03, 0x80, 0x4f, 0x71, 0xe4, 0x9f,
            0x33, 0x20, 0x08, 0x16, 0x37, 0x51, 0x2c, 0x6c, 0xbf, 0x2b, 0xb8, 0x1b, 0x6f, 0x6b,
            0xe2, 0x39, 0x84, 0x6d,
        ]),
        BigUint::from_u32(3).unwrap(),
    )
    .unwrap();
    let verifying_key: VerifyingKey<Sha256> = VerifyingKey::new(pubkey);
    let sig = pkcs1v15::Signature::try_from(&sig_bytes[..]).unwrap();
    verifying_key.verify(&msg_bytes, &sig).unwrap();
    0
}
